============================
Positioning Git Repository
============================

The Positioning repository is a collection of 5 proofs of concept:
* GNSSService
* SensorsService
* EnhancedPositionService
* LogReplayer

===============================
Directory Structure
===============================

enhanced-position-service   //2 enhanced-position-service PoCs (one with dbus interfaces and one with commonapi interfaces)
gnss-service                //gnss-service PoC
log-replayer                //log-replayer-PoC
sensors-service             //sensors-service PoC
architecture.png            //architecture overview
build-all.sh                //script to build the PoCs (usage: build-all.sh help) 
run-test.sh                 //script to run a quick test for each PoC (usage: run-test.sh help) 
positioning_x.y.bb          //version x.y of a Yocto recipe for the positioning PoCs


===============================
How To Build
===============================

To build the positioning proofs of concept please follow the following steps:
First create and enter the build folder
mkdir ./build
cd build

To build:
cmake ../
make

To build with tests:
cmake -DWITH_TESTS=ON -DWITH_DEBUG=ON ../
make

To build with tests and with dbus interface based on Franca and CommonAPI (see below how to configure CommonAPI):
cmake -DWITH_DBUS_INTERFACE=ON -DWITH_FRANCA_INTERFACE=OFF -DWITH_TESTS=ON -DWITH_DEBUG=ON -DWITH_DLT=OFF ../
make

To build with tests and reading GPS NMEA data from a GPS receiver attached to /dev/ttyACM0 at 38400
cmake -DWITH_NMEA=ON -DWITH_TESTS=ON -DWITH_DEBUG=ON -DGNSS_DEVICE=\"/dev/ttyACM0\" -DGNSS_BAUDRATE=B38400 ../

To build with tests and with the logger  but without the EnhancedPositionService:
and reading GPS NMEA data from a GPS receiver attached to /dev/ttyACM0 at 38400 baud
with a u-blox chipset and 400ms transmission delay
and with MPU6050 as source for gyro and accelerometer data
cmake -DWITH_ENHANCED_POSITION_SERVICE=OFF -DWITH_NMEA=ON -DWITH_MPU6050=ON -DWITH_LOGGER=ON -DWITH_TESTS=ON -DWITH_DEBUG=ON -DGNSS_DEVICE=\"/dev/ttyACM0\" -DGNSS_BAUDRATE=B38400 -DGNSS_CHIPSET=UBLOX -DGNSS_DELAY=400 ../


===============================
Compiler Options and default setting
(see dependencies below)
===============================

option(WITH_ENHANCED_POSITION_SERVICE
       "Build the Enhanced Positioning Service" ON)
option(WITH_GNSS_SERVICE
       "Build the GNSS Service" ON)
option(WITH_LOG_REPLAYER
       "Build the Log Replayer" ON)
option(WITH_SENSORS_SERVICE
       "Build the Sensors Service" ON)
option(WITH_FRANCA_INTERFACE
       "Build using the Franca interfaces" OFF)
option(WITH_DBUS_INTERFACE
       "Build using the D-Bus interfaces" ON)
option(WITH_DEBUG
        "Enable the debug messages" OFF)
option(WITH_DLT
    "Enable DLT logging" OFF)
option(WITH_GPSD
    "Use GPSD as source of GPS data" OFF)
option(WITH_NMEA
    "Use NMEA as source of GPS data" OFF)   
option(WITH_REPLAYER
    "Use REPLAYER as source of GPS data" ON)
option(WITH_TESTS
    "Compile test applications" OFF)
option(WITH_IPHONE
    "Use IPHONE as source of sensors data" OFF)

Just set the option to ON or OFF on the command line.

===============================
How To Test
===============================

To test the positioning proofs of concept please use the following test application (under top folder):
(please note that you need to build with -DWITH_TESTS=ON and -DWITH_DEBUG=ON to see something displayed)

./run-test.sh [command]

service:
  gnss            Test GNSSService
  sns             Test SensorsService
  enhpos          Test EnhancedPositionService
  repl            Test Replayer
  kill            Kill all test applications
  help            Print Help

===============================
Dependencies
===============================
You might have to install additional packages to Compile and run the
Positioning PoC.
This section tries to summarize those dependencies.
Also necessary commands to install those packages are provided for Debian
based systems (Ubuntu, Raspbian, ...) with the apt package manager.
Other Linux distributions (e.g. openSuSE) may require some adaptation as
the package names and even the package manager may be different.

CMake is used to create the make files
sudo apt-get install cmake

DWITH_GPSD=ON requires that the package 'gpsd' is installed.
To install 'gpsd', please execute the following commands:
sudo apt-get install gpsd
sudo apt-get install libgps-dev

To test the enhanced-position-service (dbus-service) the packages 'libdbus-c++-dev' and 'xsltproc' must be installed.
To install these packages, please execute the following commands:
sudo apt-get install libdbus-c++-dev
sudo apt-get install xsltproc
On some installations (observed on Raspberry Pi), you even have to 
sudo apt-get install libdbus-c++
sudo apt-get install libdbus-1-dev
sudo ldconfig 

To test the enhanced-position-service (commonapi-service) the package CommonAPI must be installed.
To install CommonAPI, please see http://git.projects.genivi.org/?p=ipc/common-api-dbus-runtime.git;a=blob;f=README

DWITH_TESTS=ON enables the compilation of the test application(s).

DWITH_DLT=ON requires that the DLT-daemon is installed.
To download the DLT-daemon, just execute the following command:
git clone git://git.projects.genivi.org/dlt-daemon.git
To install the DLT-daemon, etxract the tarball and follow the 
instructions in the file install.txt.
Note: You may have to call 
  export PKG_CONFIG_PATH=/usr/lib/pkgconfig
before  
  sudo ldconfig
to add DLT to the pkgconfig search path before calling cmake

DWITH_IPHONE=ON requires that the iPhone app 'SensorLogger' is
installed on a iPhone and that the option to broadcast the
sensor data is activated (port=5555).

 

